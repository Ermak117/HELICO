from utils import randbool  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥
from utils import randcell
from utils import randcell2  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é randcell2

# 0 - –ø–æ–ª–µ
# 1 - –¥–µ—Ä–µ–≤–æ
# 2 - —Ä–µ–∫–∞
# 3 - –≥–æ—Å–ø–∏—Ç–∞–ª—å
# 4 - –∞–ø–≥—Ä–µ–π–¥—à–æ–ø
# 5 - –æ–≥–æ–Ω—å
CELL_TYPES = "üü©üå≤üü¶üè•üè®üî•"  # —Å–ø–∏—Å–æ–∫ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
TREE_BONUS = 100
#TODO: change to 5000
UPGRADE_COST = 500

class Map:
    def __init__(self, w, h):
        self.w = w
        self.h = h
        # —Ö—Ä–∞–Ω–∏–º –∫–ª–µ—Ç–∫–∏ –∫–∞–∫ [row=y][col=x]
        self.cells = [[0 for _ in range(w)] for _ in range(h)]
        self.generate_forest(3, 10)  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
        self.generate_river(10)
        self.generate_river(10)
        self.generate_upgrade_shop()

    def check_bounds(self, x, y):
        # x ‚Äî –ø–æ —à–∏—Ä–∏–Ω–µ (—Å—Ç–æ–ª–±–µ—Ü), y ‚Äî –ø–æ –≤—ã—Å–æ—Ç–µ (—Å—Ç—Ä–æ–∫–∞)
        return 0 <= x < self.h and 0 <= y < self.w

    def print_map(self, helico):
        print('‚¨õÔ∏è' * (self.w + 2))  # –≤–µ—Ä—Ö–Ω—è—è —Ä–∞–º–∫–∞
        for x in range(self.h):
            print('‚¨õÔ∏è', end="")  # –ª–µ–≤–∞—è —Ä–∞–º–∫–∞
            for y in range(self.w):
                if helico.x == x and helico.y == y:
                    print('üöÅ', end="")
                else:
                    cell = self.cells[x][y]
                    if 0 <= cell < len(CELL_TYPES):
                        print(CELL_TYPES[cell], end="")
                    else:
                        print('?', end="")
            print('‚¨õÔ∏è')  # –ø—Ä–∞–≤–∞—è —Ä–∞–º–∫–∞
        print('‚¨õÔ∏è' * (self.w + 2))  # –Ω–∏–∂–Ω—è—è —Ä–∞–º–∫–∞

    def generate_river(self, length):
        # –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ randcell(w, h) -> (x, y)
        x, y = randcell(self.h, self.w)
        self.cells[x][y] = 2  # [row=y][col=x]

        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –¥–ª–∏–Ω–∞ —Å—á–∏—Ç–∞–ª–∞ —Ç–æ–ª—å–∫–æ –£–î–ê–ß–ù–´–ï —à–∞–≥–∏, –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—á—ë—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
        steps = 0
        while steps < length:
            nx, ny = randcell2(x, y)  # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ—Å–µ–¥–Ω—è—è –∫–ª–µ—Ç–∫–∞ (x, y)
            if self.check_bounds(nx, ny):
                self.cells[nx][ny] = 2
                x, y = nx, ny
                steps += 1
            else:
                # –º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å ‚Äî —à–∞–≥ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
                pass

    def generate_forest(self, r, mxr):
        # —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
        for x in range(self.h):
            for y in range(self.w):
                if randbool(r, mxr):
                    self.cells[x][y] = 1

    def generate_tree(self):
        # –º–µ—Ö–∞–Ω–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ—Å–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–ª–µ—Ç–æ—á–∫—É –Ω–∞ –ø–æ–ª–µ W x H
        cx, cy = randcell(self.h, self.w)
        if self.cells[cx][cy] == 0:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ
            self.cells[cx][cy] = 1
    
    def generate_upgrade_shop(self): # –º–µ—Ö–∞–Ω–∏–∫–∞ –∞–ø–≥—Ä–µ–π–¥ —à–æ–ø–∞
        c = randcell(self.h, self.w)
        cx, cy = c[0], c[1]
        self.cells[cx][cy] = 4

    def add_fire(self):
        # –º–µ—Ö–∞–Ω–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–≥–Ω—è
        cx, cy = randcell(self.h, self.w)
        if self.cells[cx][cy] == 1:
            self.cells[cx][cy] = 5

    def update_fires(self):
        # –≤—Å–µ –≥–æ—Ä—è—â–∏–µ –∫–ª–µ—Ç–∫–∏ —Å–≥–æ—Ä–∞—é—Ç –¥–æ –ø–æ–ª—è
        for y in range(self.w):
            for x in range(self.h):
                if self.cells[x][y] == 5:
                    self.cells[x][y] = 0
        # –∑–∞—Ç–µ–º –ø–æ–¥–∂–∏–≥–∞–µ–º –Ω–æ–≤—ã–µ
        for _ in range(10): # —á–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–≥–Ω—è –Ω–∞ –∫–∞—Ä—Ç–µ
            self.add_fire()

    def process_helicopter(self, helico):
        c = self.cells[helico.x] [helico.y]
        if (c == 2):
            helico.tank = helico.mxtank
        if (c == 5 and helico.tank > 0):
            helico.tank -= 1
            helico.score += TREE_BONUS
            self.cells[helico.x][helico.y] = 1
        if (c == 4 and helico.score >= UPGRADE_COST):
            helico.mxtank += 1
            helico.score -= UPGRADE_COST